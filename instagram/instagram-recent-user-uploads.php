<?php

  /**
   *  Get Recent User Uploads
   *  -----------------------
   *
   *  How to obtain a Instagram Access Token
   *  --------------------------------------
   *  Register a new client by visiting http://instagram.com/developer/.
   *  Make sure you are logged in as the target account.
   *
   *  Once the client is created, change the following url to match the
   *  parameters of the client:
   *    https://api.instagram.com/oauth/authorize/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=code
   *  This will respond in a redirect with the access token in the url.
   *
   *  How to obtain User ID
   *  ---------------------
   *  Enter the following into your broswer url, changing the values to
   *  match the parameters of the user:
   *  https://api.instagram.com/v1/users/search?q=USERNAME&access_token=ACCESS TOKEN
   *
   *  This will return some json data, including your user ID
   *
   *  This file will create a cache that lasts for 1 hour. This helps
   *  keep calls to the IG servers down and prevents a lockout.
   *
   *
   *
   *  Basic Function
   *  --------------
   *  See `instagram-recent-user-uploads-wp-assist.php` if using WordPress
   *
   *  get_the_gram($count, $cache_time)
   *
   *  @param  $count        | int how many results to display per request
   *  @param  $cache_time   | time string. see http://php.net/manual/en/datetime.formats.time.php
   *  @param  $access_token | string, IG Access Token
   *  @param  $user_id      | int, IG user ID
   *
   *  @return array       | data: recent user uploads. Use in foreach
   *
   *
   */


  function get_the_gram(
    $count = 10,                                // How many results display per request
    $cache_time = '-1 hour',                    // Negative time that can be converted via strtotime()
    $access_token = '123456789.12345.12345'     // String, Access Token generated by instagram
    $user_id = 123456789,                       // Int, Instagram User ID
  ) {

    $url = 'https://api.instagram.com/v1/users/'.$user_id.'/media/recent/?access_token='.$access_token.'&count='.$count;
    $cache_directory = './app/cache/'; // path to cache folder, name should end in slash, such as './app/cache/'
    $cache_file = $cache_directory.sha1($url).'.json';


    if (file_exists($cache_file) && filemtime($cache_file) > strtotime($cache_time)) {
      // If a cache file exists, and it is newer than 1 hour, use it
      $jsonData = json_decode(file_get_contents($cache_file));
    } else {
      // If file does not exist, create directory and file, or update file with newer json data
      $jsonData = json_decode( file_get_contents($url) );
      $jsonEncode = json_encode($jsonData);

      if( !file_exists($cache_file) ) {
        $method = 'a';
        mkdir($cache_directory, 0755, true);
      } else {
        $method = 'w';
      }

      $fh = fopen($cache_file,$method);
      fwrite($fh, $jsonEncode."\n");
    }

    return $jsonData;
  }

?>